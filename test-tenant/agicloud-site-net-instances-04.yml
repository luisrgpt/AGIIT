---
# file: agicloud-site-net-instances-04.yml
# creates a demo tenant infrastructure (networks, host instances)
# This is a single Play named "Create Tenant Infrastructure"
# Please note that in tasks there were included "debug" options
# to report the results of the tasks
#
# This is the Fourth step - create server instances and add them to inventory


- name: Create Tenant Infrastructure
  hosts: localhost

  tasks:
  # creating the frontend network (dmz)  
  - os_network:
      name: frontend_network
    register: net_frontend

  # defines the subnet (addressing) for the frontend network including DNS 
  - os_subnet:
      state: present
      network_name: frontend_network
      name: frontend_subnet
      cidr: 192.168.0.0/24
      enable_dhcp: True
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
    register: subnet_frontend

  # creating the backend network (for web servers)  
  - os_network:
      name: backend_network
    register: net_backend

  # defines the subnet (addressing) for the backend network including DNS 
  - os_subnet:
      state: present
      network_name: backend_network
      name: backend_subnet
      cidr: 192.168.1.0/24
      enable_dhcp: True
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
    register: subnet_backend
     

  #  creating a router connecting the frontend to the external (public) network
  - os_router:
      state: present
      name: vrdmz
      network: external
      interfaces:
        - frontend_subnet
        - backend_subnet
    register: vr_ext

  # creating a key pair for passwordless remote ssh
  - os_keypair:
      state: present
      name: ansible-key
      public_key_file: /home/vagrant/.ssh/id_rsa.pub
    register: kp

  #  creating security group to allow access to frontend servers
  - name: Create a new security group
    os_security_group:
      state: present
      name: sec_ingr
  #  creating security group Rule for ICMP
  - name: Create a new security group allowing any ICMP
    os_security_group_rule:
      security_group: sec_ingr
      protocol: icmp
      remote_ip_prefix: 0.0.0.0/0
  #  creating security group Rule for SSH
  - name: Create a new security group allowing any SSH connection
    os_security_group_rule:
      security_group: sec_ingr
      protocol: tcp
      port_range_min: 22
      port_range_max: 22
      remote_ip_prefix: 0.0.0.0/0
  #  creating security group Rule for HTTP port 80
  - name: Create a new security rule allowing normal web connection
    os_security_group_rule:
      security_group: sec_ingr
      protocol: tcp
      port_range_min: 80
      port_range_max: 80
      remote_ip_prefix: 0.0.0.0/0
  #  creating security group Rule for secure HTTP port 443
  - name: Create a new security rule allowing secure web connection
    os_security_group_rule:
      security_group: sec_ingr
      protocol: tcp
      port_range_min: 443
      port_range_max: 443
      remote_ip_prefix: 0.0.0.0/0

  #  create an instance (a server) connected to the frontend network.
  - os_server:
      state: present
      name: bastionbal
      image: Ubuntu Xenial server (16.04)
      key_name: ansible-key
      timeout: 200
      flavor: m1.tiny
      security_groups: "default,sec_ingr"
      network: frontend_network
      reuse_ips: True
      auto_ip: yes
    register: bastionbal
  - debug:
      var: bastionbal
   

  #  create an instance (a web server) connected to the backend network.
  - os_server:
      state: present
      name: web1
      image: Ubuntu Xenial server (16.04)
      key_name: ansible-key
      timeout: 200
      flavor: m1.tiny
      security_groups: "default"
      network: backend_network
      auto_ip: no
    register: web1
  - debug:
      var: web1   

  #  create another instance (a web server) connected to the backend network.
  - os_server:
      state: present
      name: web2
      image: Ubuntu Xenial server (16.04)
      key_name: ansible-key
      timeout: 200
      flavor: m1.tiny
      security_groups: "default"
      network: backend_network
      auto_ip: no
    register: web2
  - debug:
      var: web2   

  #  Add bastionbal Ubuntu Instance to Inventory
  - add_host: 
      name: "{{ bastionbal.server.public_v4 }}"
      groups: frontservers
      instance_name: bastionbalance
      ansible_host: "{{ bastionbal.server.public_v4 }}"
      ansible_user: ubuntu
      ansible_become: true

  #  Add web1 Ubuntu Instance to Inventory
  - add_host: 
      name: "{{ web1.server.private_v4 }}"
      groups: web
      instance_name: web1
      ansible_host: "{{ web1.server.private_v4 }}"
      ansible_user: ubuntu
      ansible_become: true

  #  Add web1 Ubuntu Instance to Inventory
  - add_host: 
      name: "{{ web2.server.private_v4 }}"
      groups: web
      instance_name: web2
      ansible_host: "{{ web2.server.private_v4 }}"
      ansible_user: ubuntu
      ansible_become: true

